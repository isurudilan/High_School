showarrow = FALSE
),
list(
x=0.5,
y=-0.035,
text="Release Year",
xref = "paper",
yref = "paper",
xanchor = "bottom",
yanchor = "top",
showarrow = FALSE,
font=list(size=16)
)
)
fig <- fig |> layout(annotations = annotations)
fig
#| warning: false
#| code-fold: true
df<-read.csv("Artists_TS_B.csv")
df$artist_name<-as.factor(df$artist_name)
# Aggregate data to get average values for each year and artist
agg_df <- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)
# Define custom colors for Ed Sheeran and Taylor Swift
custom_colors <- c("Ed Sheeran" = "blue", "Taylor Swift" = "red")
# Plot danceability bubble chart
fig1 <- plot_ly(agg_df, x = ~album_release_year, y = ~danceability,
size = ~danceability,
color = ~artist_name,
type = 'scatter', mode = 'markers',
marker = list(sizemode = 'diameter', sizeref = 1.6),
colors = custom_colors,
legendgroup = ~artist_name ,
showlegend = FALSE
) |>
layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))
# Plot speechiness bubble chart
fig2 <- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness,
size = ~speechiness, color = ~artist_name,
type = 'scatter', mode = 'markers',
marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)),
colors = custom_colors, legendgroup = ~artist_name,
showlegend = FALSE) |>
layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))
# Plot acousticness bubble chart
fig3 <- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness,
size = ~acousticness, color = ~artist_name,
type = 'scatter', mode = 'markers',
marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)),
colors = custom_colors,
legendgroup = ~artist_name,
showlegend = FALSE
) |>
layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE))
# Plot liveness bubble chart
fig4 <- plot_ly(agg_df, x = ~album_release_year, y = ~liveness,
size = ~liveness, color = ~artist_name,
type = 'scatter', mode = 'markers',
marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)),
colors = custom_colors,
legendgroup = ~artist_name,
showlegend = TRUE
) |>
layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))
# Combine subplots
#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)
# fig <- make_subplots(rows=2,
#                     cols=2,
#                     #print_grid=True,
#                     vertical_spacing=0.1,
#                     horizontal_spacing=0.085,
#                     x_title='Your master x-title',
#                     y_title='Your master y-title')
fig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)
#fig <- subplot(fig1, fig2, nrows=2, shareX = TRUE, showlegend=TRUE)
#%>% layout(title = "Average Music Properties of Beyoncé and Taylor Swift's Songs")
annotations <- list(
list(
x = 0.2,
y = 1.0,
text = "Danceability",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Speechiness",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.45,
text = "Acousticness",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.45,
text = "Liveness",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x=0.5,
y=-0.035,
text="Release Year",
xref = "paper",
yref = "paper",
xanchor = "bottom",
yanchor = "top",
showarrow = FALSE,
font=list(size=16)
)
)
fig <- fig |> layout(annotations = annotations)
fig
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(imputeTS)
library(gridExtra)
library(reticulate)
library(readxl)
use_python("/usr/local/bin/python3", require = T)
knitr::knit_engines$set(python = reticulate::eng_python)
py_install("tensorflow")
View(df)
unique(df$album_release_year)
years_to_keep <- c(2006, 2008, 2010, 2014, 2019, 2020, 2022)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(imputeTS)
library(gridExtra)
library(reticulate)
library(readxl)
# use_python("/usr/local/bin/python3", require = T)
# knitr::knit_engines$set(python = reticulate::eng_python)
# py_install("tensorflow")
filtered_df <- subset(df, album_release_year %in% years_to_keep)
# Aggregate tempo values by artist_name and album_release_year
agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)
View(agg_df)
View(agg_df)
# Aggregate tempo values by artist_name and album_release_year
agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = df, FUN = mean)
View(agg_df)
# Create the animated bar plot
fig <- plot_ly(agg_df,
x = ~artist_name,
y = ~tempo,
color = ~artist_name,
type = 'bar',
frame = ~album_release_year,
text = ~artist_name,
hoverinfo = "text")
# Add animation button and slider
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
# Create the animated bar plot
fig <- plot_ly(agg_df,
x = ~artist_name,
y = ~tempo,
color = ~artist_name,
type = 'bar',
frame = ~album_release_year,
text = ~artist_name,
hoverinfo = "text")
fig
# Add animation button and slider
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
fig <- fig %>% animation_slider(
currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)
# Add title, x-axis label, and y-axis label
fig <- fig %>% layout(
title = "Tempo of Beyoncé and Taylor Swift’s songs over the Years",
xaxis = list(title = "Album Release Year"),
yaxis = list(title = "Tempo")
)
fig
View(agg_df)
years_to_keep <- c(2014,2017,2019, 2021, 2022, 2023)
filtered_df <- subset(df, album_release_year %in% years_to_keep)
# Aggregate tempo values by artist_name and album_release_year
agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = df, FUN = mean)
# Aggregate tempo values by artist_name and album_release_year
agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)
View(agg_df)
# Create the animated bar plot
fig <- plot_ly(agg_df,
x = ~artist_name,
y = ~tempo,
color = ~artist_name,
type = 'bar',
frame = ~album_release_year,
text = ~artist_name,
hoverinfo = "text")
# Add animation button and slider
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
fig <- fig %>% animation_slider(
currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)
# Add title, x-axis label, and y-axis label
fig <- fig %>% layout(
title = "Tempo of Beyoncé and Taylor Swift’s songs over the Years",
xaxis = list(title = "Album Release Year"),
yaxis = list(title = "Tempo")
)
fig
# Add title, x-axis label, and y-axis label
fig <- fig %>% layout(
title = "Tempo of Ed Sheeran's and Taylor Swift’s songs over the Years",
xaxis = list(title = "Album Release Year"),
yaxis = list(title = "Tempo (BPM)")
)
fig
View(df)
library(dplyr)
library(wordcloud2)
library(tidyr)
library(tidytext)
df2<-df
# Remove "(Taylor's Version)" from track names
df2$track_name <- gsub("\\(Taylor's Version\\)|Taylor’s Version|\\(From The Vault\\)", "", df2$track_name)
# Print cleaned track names
head(df2)
# Filter data for Taylor Swift and Beyoncé
taylor_swift_data <- df2 %>%
filter(artist_name == "Taylor Swift")
beyonce_data <- df2 %>%
filter(artist_name == "Ed Sheeran")
# Tokenize track names and count word frequencies for Taylor Swift
taylor_swift_word_freq <- taylor_swift_data %>%
unnest_tokens(word, track_name) %>%
count(word) %>%
arrange(desc(n))
# Tokenize track names and count word frequencies for Beyoncé
beyonce_word_freq <- beyonce_data %>%
unnest_tokens(word, track_name) %>%
count(word) %>%
arrange(desc(n))
# Create word clouds for Taylor Swift and Beyoncé
# Words to be removed
words_to_remove <- c("the", "this", "to", "is", "are")
# Filter out the words to be removed from your word frequency data
taylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]
# Set up your word cloud parameters
ts_size <- 1
ts_bg_color <- "white"
ts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')
# Convert your filtered data to a data frame
ts_data <- as.data.frame(taylor_swift_word_freq_filtered)
ts_dataOut <- ts_data[,1:2]
names(ts_dataOut) <- c("name", "freq")
# Calculate weight factor
weightFactor <- ts_size * 180 / max(ts_dataOut$freq)
# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL
# Set up word cloud settings
ts_settings <- list(
word = ts_dataOut$name,
freq = ts_dataOut$freq,
fontFamily = 'Segoe UI',
fontWeight = 'bold',
color =  ts_color,
minSize =  0,
weightFactor = weightFactor,
backgroundColor = ts_bg_color,
gridSize =  0,
minRotation = -pi/4,
maxRotation = pi/4,
shuffle = TRUE,
rotateRatio = 0.4,
shape = 'circle',
ellipticity = 0.65,
figBase64 = NULL,
hover = htmlwidgets::JS(hoverFunction)
)
# Create the word cloud
htmlwidgets::createWidget("wordcloud2", ts_settings,
width = widgetsize[1],
height = widgetsize[2],
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
browser.padding = 0,
browser.fill = TRUE
))
#wc2_beyonce <- wordcloud2(beyonce_word_freq, size = 1, backgroundColor = "white", color = ifelse(beyonce_word_freq[, 2] > 8, 'purple', 'green'))
#wordcloud2::wordcloud2Output("wcb", width="100%", height = "400px")
#wordcloud2::renderWordcloud2(wc2_beyonce)
#wc2_beyonce
# Words to be removed
words_to_remove <- c("on", "the", "in")
# Filter out the words to be removed from your word frequency data
beyonce_word_freq_filtered <- beyonce_word_freq[!beyonce_word_freq[,1] %in% words_to_remove, ]
# Set up your word cloud parameters
b_size <- 1
b_bg_color <- "white"
ts_color <- ifelse(beyonce_word_freq_filtered[, 2] > 8, 'purple', 'green')
# Convert your filtered data to a data frame
b_data <- as.data.frame(beyonce_word_freq_filtered)
b_dataOut <- b_data[,1:2]
names(b_dataOut) <- c("name", "freq")
# Calculate weight factor
b_weightFactor <- b_size * 180 / max(b_dataOut$freq)
# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL
# Set up word cloud settings
b_settings <- list(
word = b_dataOut$name,
freq = b_dataOut$freq,
fontFamily = 'Segoe UI',
fontWeight = 'bold',
color =  ts_color,
minSize =  0,
weightFactor = b_weightFactor,
backgroundColor = b_bg_color,
gridSize =  0,
minRotation = -pi/4,
maxRotation = pi/4,
shuffle = TRUE,
rotateRatio = 0.4,
shape = 'circle',
ellipticity = 0.65,
figBase64 = NULL,
hover = htmlwidgets::JS(hoverFunction)
)
# Create the word cloud
htmlwidgets::createWidget("wordcloud2", b_settings,
width = widgetsize[1],
height = widgetsize[2],
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
browser.padding = 0,
browser.fill = TRUE
))
df<-read.csv("Artists_TS_B.csv")
df$artist_name<-as.factor(df$artist_name)
library(dplyr)
library(wordcloud2)
library(tidyr)
library(tidytext)
df2<-df
# Remove "(Taylor's Version)" from track names
df2$track_name <- gsub("\\(Taylor's Version\\)|Taylor’s Version|\\(From The Vault\\)", "", df2$track_name)
# Print cleaned track names
head(df2)
# Filter data for Taylor Swift and Ed Sheeran
taylor_swift_data <- df2 %>%
filter(artist_name == "Taylor Swift")
ed_data <- df2 %>%
filter(artist_name == "Ed Sheeran")
# Tokenize track names and count word frequencies for Taylor Swift
taylor_swift_word_freq <- taylor_swift_data %>%
unnest_tokens(word, track_name) %>%
count(word) %>%
arrange(desc(n))
# Tokenize track names and count word frequencies for Ed Sheeran
ed_word_freq <- ed_data %>%
unnest_tokens(word, track_name) %>%
count(word) %>%
arrange(desc(n))
# Create word clouds for Taylor Swift and Ed Sheeran
# Words to be removed
words_to_remove <- c("the", "this", "to", "is", "are")
# Filter out the words to be removed from your word frequency data
taylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]
# Set up your word cloud parameters
ts_size <- 1
ts_bg_color <- "white"
ts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')
# Convert your filtered data to a data frame
ts_data <- as.data.frame(taylor_swift_word_freq_filtered)
ts_dataOut <- ts_data[,1:2]
names(ts_dataOut) <- c("name", "freq")
# Calculate weight factor
weightFactor <- ts_size * 180 / max(ts_dataOut$freq)
# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL
# Set up word cloud settings
ts_settings <- list(
word = ts_dataOut$name,
freq = ts_dataOut$freq,
fontFamily = 'Segoe UI',
fontWeight = 'bold',
color =  ts_color,
minSize =  0,
weightFactor = weightFactor,
backgroundColor = ts_bg_color,
gridSize =  0,
minRotation = -pi/4,
maxRotation = pi/4,
shuffle = TRUE,
rotateRatio = 0.4,
shape = 'circle',
ellipticity = 0.65,
figBase64 = NULL,
hover = htmlwidgets::JS(hoverFunction)
)
# Create the word cloud
htmlwidgets::createWidget("wordcloud2", ts_settings,
width = widgetsize[1],
height = widgetsize[2],
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
browser.padding = 0,
browser.fill = TRUE
))
# Words to be removed
words_to_remove <- c("on", "the", "in")
# Filter out the words to be removed from your word frequency data
ed_word_freq_filtered <- ed_word_freq[!ed_word_freq[,1] %in% words_to_remove, ]
# Set up your word cloud parameters
b_size <- 1
b_bg_color <- "white"
ts_color <- ifelse(ed_word_freq_filtered[, 2] > 8, 'purple', 'green')
# Convert your filtered data to a data frame
b_data <- as.data.frame(ed_word_freq_filtered)
b_dataOut <- b_data[,1:2]
names(b_dataOut) <- c("name", "freq")
# Calculate weight factor
b_weightFactor <- b_size * 180 / max(b_dataOut$freq)
# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL
# Set up word cloud settings
b_settings <- list(
word = b_dataOut$name,
freq = b_dataOut$freq,
fontFamily = 'Segoe UI',
fontWeight = 'bold',
color =  ts_color,
minSize =  0,
weightFactor = b_weightFactor,
backgroundColor = b_bg_color,
gridSize =  0,
minRotation = -pi/4,
maxRotation = pi/4,
shuffle = TRUE,
rotateRatio = 0.4,
shape = 'circle',
ellipticity = 0.65,
figBase64 = NULL,
hover = htmlwidgets::JS(hoverFunction)
)
# Create the word cloud
htmlwidgets::createWidget("wordcloud2", b_settings,
width = widgetsize[1],
height = widgetsize[2],
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
browser.padding = 0,
browser.fill = TRUE
))
View(taylor_swift_data)
View(taylor_swift_word_freq)
ed_word_freq
