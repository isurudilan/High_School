---
title: "Data Visualizations"
---

```{r message=FALSE, warning=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(imputeTS)
library(gridExtra)
library(reticulate)
library(readxl)
# use_python("/usr/local/bin/python3", require = T)
# knitr::knit_engines$set(python = reticulate::eng_python)
# py_install("tensorflow")
```

## Data

This data is downloaded using Spotify API.

![](t1.png)

![](e1.png)

## Spotify Audio Features

For every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guide<https://developer.spotify.com/discover/> defines them as follows:

`Danceability`: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.

`Valence`: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

`Energy`: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.

`Tempo`: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.

`Loudness`: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.

`speechiness`: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.

`Instrumentalness`: Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal".

`Liveness`: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.

`Acousticness`: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.

`Key`: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.

`Mode`: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.

`Duration`: The duration of the track in milliseconds.

`Time Signature`: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).

## Music properties of Ed Sheeran's and Taylor Swift's songs

```{r}
#| warning: false
#| code-fold: true


df<-read.csv("Artists_TS_B.csv") 
df$artist_name<-as.factor(df$artist_name)


# Aggregate data to get average values for each year and artist
agg_df <- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)

# Define custom colors for Ed Sheeran and Taylor Swift
custom_colors <- c("Ed Sheeran" = "blue", "Taylor Swift" = "red")

# Plot danceability bubble chart
fig1 <- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, 
                size = ~danceability,
                color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6),
                colors = custom_colors,
                legendgroup = ~artist_name ,
                showlegend = FALSE
) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))



# Plot speechiness bubble chart
fig2 <- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, 
                size = ~speechiness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors, legendgroup = ~artist_name,
                showlegend = FALSE) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) 

# Plot acousticness bubble chart
fig3 <- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, 
                size = ~acousticness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors,
                legendgroup = ~artist_name,
                showlegend = FALSE
) |>
  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) 

# Plot liveness bubble chart
fig4 <- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, 
                size = ~liveness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors,
                legendgroup = ~artist_name,
                showlegend = TRUE
) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) 

# Combine subplots
#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)

# fig <- make_subplots(rows=2,
#                     cols=2,
#                     #print_grid=True,
#                     vertical_spacing=0.1,
#                     horizontal_spacing=0.085,
#                     x_title='Your master x-title',
#                     y_title='Your master y-title')

fig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)


annotations <- list(
  list(
    x = 0.2,
    y = 1.0,
    text = "Danceability",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.8,
    y = 1,
    text = "Speechiness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.2,
    y = 0.45,
    text = "Acousticness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.8,
    y = 0.45,
    text = "Liveness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x=0.5,
    y=-0.035,
    text="Release Year",
    xref = "paper",
    yref = "paper",
    xanchor = "bottom",
    yanchor = "top",
    showarrow = FALSE,
    font=list(size=16)
  )
)

fig <- fig |> layout(annotations = annotations)
fig
```

# This is a bar chart for comparison

<div class='tableauPlaceholder' id='viz1710389719964' style='position: relative'><noscript><a href='#'><img alt='music prop ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='musicprops&#47;musicprop' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>
<script type='text/javascript'>
    var divElement = document.getElementById('viz1710389719964');
    var vizElement = divElement.getElementsByTagName('object')[0];
    if (divElement.offsetWidth > 800) {
        vizElement.style.width='100%';
        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';
    } else if (divElement.offsetWidth > 500) {
        vizElement.style.width='100%';
        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';
    } else {
        vizElement.style.width='100%';
        vizElement.style.height='727px';
    }
    var scriptElement = document.createElement('script');
    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
    vizElement.parentNode.insertBefore(scriptElement, vizElement);
</script>


## Tempo Ed Sheeran's and Taylor Swift's songs over the Years

```{r}
#| warning: false
#| code-fold: true

years_to_keep <- c(2014,2017,2019, 2021, 2022, 2023)
filtered_df <- subset(df, album_release_year %in% years_to_keep)

# Aggregate tempo values by artist_name and album_release_year
agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)

# Create the animated bar plot
fig <- plot_ly(agg_df,
               x = ~artist_name,
               y = ~tempo, 
               color = ~artist_name, 
               type = 'bar',
               frame = ~album_release_year, 
               text = ~artist_name, 
               hoverinfo = "text")

# Add animation button and slider
fig <- fig %>% animation_button(
  x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
fig <- fig %>% animation_slider(
  currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)

# Add title, x-axis label, and y-axis label
fig <- fig %>% layout(
  title = "Tempo of Ed Sheeran's and Taylor Swift’s songs over the Years",
  xaxis = list(title = "Album Release Year"),
  yaxis = list(title = "Tempo (BPM)")
)
fig
```

## Number of Albums released each year by each Artist

<div class='tableauPlaceholder' id='viz1710392510766' style='position: relative'><noscript><a href='#'><img alt='albums ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='albums_17103889273940&#47;albums' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>
<script type='text/javascript'>
    var divElement = document.getElementById('viz1710392510766');
    var vizElement = divElement.getElementsByTagName('object')[0];
    if (divElement.offsetWidth > 800) {
        vizElement.style.width='100%';
        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';
    } else if (divElement.offsetWidth > 500) {
        vizElement.style.width='100%';
        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';
    } else {
        vizElement.style.width='100%';
        vizElement.style.height='727px';
    }
    var scriptElement = document.createElement('script');
    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
    vizElement.parentNode.insertBefore(scriptElement, vizElement);
</script>

## Most frequently used words in track names

```{r echo=FALSE}
#| warning: false
#| code-fold: true

library(dplyr)
library(wordcloud2)
library(tidyr)
library(tidytext)


df2<-df

# Remove "(Taylor's Version)" from track names
df2$track_name <- gsub("\\(Taylor's Version\\)|Taylor’s Version|\\(From The Vault\\)", "", df2$track_name)

# Print cleaned track names
#head(df2)

# Filter data for Taylor Swift and Ed Sheeran
taylor_swift_data <- df2 %>% 
  filter(artist_name == "Taylor Swift")

ed_data <- df2 %>% 
  filter(artist_name == "Ed Sheeran")

# Tokenize track names and count word frequencies for Taylor Swift
taylor_swift_word_freq <- taylor_swift_data %>%
  unnest_tokens(word, track_name) %>%
  count(word) %>%
  arrange(desc(n))

# Tokenize track names and count word frequencies for Ed Sheeran
ed_word_freq <- ed_data %>%
  unnest_tokens(word, track_name) %>%
  count(word) %>%
  arrange(desc(n))
```

## Word cloud for Taylor Swift

```{r}
#| warning: false
#| code-fold: true

# Create word clouds for Taylor Swift and Ed Sheeran
# Words to be removed
words_to_remove <- c("the", "this", "to", "is", "are")

# Filter out the words to be removed from your word frequency data
taylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]

# Set up your word cloud parameters
ts_size <- 1
ts_bg_color <- "white"
ts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')

# Convert your filtered data to a data frame
ts_data <- as.data.frame(taylor_swift_word_freq_filtered)
ts_dataOut <- ts_data[,1:2]
names(ts_dataOut) <- c("name", "freq")

# Calculate weight factor
weightFactor <- ts_size * 180 / max(ts_dataOut$freq)

# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL

# Set up word cloud settings
ts_settings <- list(
  word = ts_dataOut$name,
  freq = ts_dataOut$freq,
  fontFamily = 'Segoe UI',
  fontWeight = 'bold',
  color =  ts_color,
  minSize =  0,
  weightFactor = weightFactor,
  backgroundColor = ts_bg_color,
  gridSize =  0,
  minRotation = -pi/4,
  maxRotation = pi/4,
  shuffle = TRUE,
  rotateRatio = 0.4,
  shape = 'circle',
  ellipticity = 0.65,
  figBase64 = NULL,
  hover = htmlwidgets::JS(hoverFunction)
)

# Create the word cloud
htmlwidgets::createWidget("wordcloud2", ts_settings,
                          width = widgetsize[1],
                          height = widgetsize[2],
                          sizingPolicy = htmlwidgets::sizingPolicy(
                            viewer.padding = 0,
                            browser.padding = 0,
                            browser.fill = TRUE
                          ))

```

## Word cloud for Ed Sheeran

```{r}
#| warning: false
#| code-fold: true

# Words to be removed
words_to_remove <- c("on", "the", "in")

# Filter out the words to be removed from your word frequency data
ed_word_freq_filtered <- ed_word_freq[!ed_word_freq[,1] %in% words_to_remove, ]

# Set up your word cloud parameters
b_size <- 1
b_bg_color <- "white"
ts_color <- ifelse(ed_word_freq_filtered[, 2] > 8, 'purple', 'green')

# Convert your filtered data to a data frame
b_data <- as.data.frame(ed_word_freq_filtered)
b_dataOut <- b_data[,1:2]
names(b_dataOut) <- c("name", "freq")

# Calculate weight factor
b_weightFactor <- b_size * 180 / max(b_dataOut$freq)

# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL

# Set up word cloud settings
b_settings <- list(
  word = b_dataOut$name,
  freq = b_dataOut$freq,
  fontFamily = 'Segoe UI',
  fontWeight = 'bold',
  color =  ts_color,
  minSize =  0,
  weightFactor = b_weightFactor,
  backgroundColor = b_bg_color,
  gridSize =  0,
  minRotation = -pi/4,
  maxRotation = pi/4,
  shuffle = TRUE,
  rotateRatio = 0.4,
  shape = 'circle',
  ellipticity = 0.65,
  figBase64 = NULL,
  hover = htmlwidgets::JS(hoverFunction)
)

# Create the word cloud
htmlwidgets::createWidget("wordcloud2", b_settings,
                          width = widgetsize[1],
                          height = widgetsize[2],
                          sizingPolicy = htmlwidgets::sizingPolicy(
                            viewer.padding = 0,
                            browser.padding = 0,
                            browser.fill = TRUE
                          ))

```
