{"title":"Data Visualizations","markdown":{"yaml":{"title":"Data Visualizations"},"headingText":"use_python(\"/usr/local/bin/python3\", require = T)","containsRefs":false,"markdown":"\n\n```{r message=FALSE, warning=FALSE, echo=FALSE}\n#| code-fold: true\n#| code-summary: 'Importing Libraries'\n#| warning: false\n#| output: false\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(imputeTS)\nlibrary(gridExtra)\nlibrary(reticulate)\nlibrary(readxl)\n# knitr::knit_engines$set(python = reticulate::eng_python)\n# py_install(\"tensorflow\")\n```\n\n## Data\n\nThis data is downloaded using Spotify API.\n\n![](t1.png)\n\n![](e1.png)\n\n## Spotify Audio Features\n\nFor every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guide<https://developer.spotify.com/discover/> defines them as follows:\n\n`Danceability`: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\n\n`Valence`: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n`Energy`: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\n\n`Tempo`: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.\n\n`Loudness`: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\n\n`speechiness`: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\n\n`Instrumentalness`: Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\".\n\n`Liveness`: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\n\n`Acousticness`: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\n\n`Key`: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.\n\n`Mode`: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\n`Duration`: The duration of the track in milliseconds.\n\n`Time Signature`: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\n\n## Music properties of Ed Sheeran's and Taylor Swift's songs\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n\ndf<-read.csv(\"Artists_TS_B.csv\") \ndf$artist_name<-as.factor(df$artist_name)\n\n\n# Aggregate data to get average values for each year and artist\nagg_df <- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)\n\n# Define custom colors for Ed Sheeran and Taylor Swift\ncustom_colors <- c(\"Ed Sheeran\" = \"blue\", \"Taylor Swift\" = \"red\")\n\n# Plot danceability bubble chart\nfig1 <- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, \n                size = ~danceability,\n                color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6),\n                colors = custom_colors,\n                legendgroup = ~artist_name ,\n                showlegend = FALSE\n) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))\n\n\n\n# Plot speechiness bubble chart\nfig2 <- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, \n                size = ~speechiness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors, legendgroup = ~artist_name,\n                showlegend = FALSE) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Plot acousticness bubble chart\nfig3 <- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, \n                size = ~acousticness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = FALSE\n) |>\n  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) \n\n# Plot liveness bubble chart\nfig4 <- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, \n                size = ~liveness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = TRUE\n) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Combine subplots\n#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)\n\n# fig <- make_subplots(rows=2,\n#                     cols=2,\n#                     #print_grid=True,\n#                     vertical_spacing=0.1,\n#                     horizontal_spacing=0.085,\n#                     x_title='Your master x-title',\n#                     y_title='Your master y-title')\n\nfig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)\n\n\nannotations <- list(\n  list(\n    x = 0.2,\n    y = 1.0,\n    text = \"Danceability\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 1,\n    text = \"Speechiness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.2,\n    y = 0.45,\n    text = \"Acousticness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 0.45,\n    text = \"Liveness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x=0.5,\n    y=-0.035,\n    text=\"Release Year\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"bottom\",\n    yanchor = \"top\",\n    showarrow = FALSE,\n    font=list(size=16)\n  )\n)\n\nfig <- fig |> layout(annotations = annotations)\nfig\n```\n\n# This is a bar chart for comparison\n\n<div class='tableauPlaceholder' id='viz1710389719964' style='position: relative'><noscript><a href='#'><img alt='music prop ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='musicprops&#47;musicprop' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>\n<script type='text/javascript'>\n    var divElement = document.getElementById('viz1710389719964');\n    var vizElement = divElement.getElementsByTagName('object')[0];\n    if (divElement.offsetWidth > 800) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else if (divElement.offsetWidth > 500) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else {\n        vizElement.style.width='100%';\n        vizElement.style.height='727px';\n    }\n    var scriptElement = document.createElement('script');\n    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';\n    vizElement.parentNode.insertBefore(scriptElement, vizElement);\n</script>\n\n\n## Tempo Ed Sheeran's and Taylor Swift's songs over the Years\n\n```{r}\n#| warning: false\n#| code-fold: true\n\nyears_to_keep <- c(2014,2017,2019, 2021, 2022, 2023)\nfiltered_df <- subset(df, album_release_year %in% years_to_keep)\n\n# Aggregate tempo values by artist_name and album_release_year\nagg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)\n\n# Create the animated bar plot\nfig <- plot_ly(agg_df,\n               x = ~artist_name,\n               y = ~tempo, \n               color = ~artist_name, \n               type = 'bar',\n               frame = ~album_release_year, \n               text = ~artist_name, \n               hoverinfo = \"text\")\n\n# Add animation button and slider\nfig <- fig %>% animation_button(\n  x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n)\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n)\n\n# Add title, x-axis label, and y-axis label\nfig <- fig %>% layout(\n  title = \"Tempo of Ed Sheeran's and Taylor Swift’s songs over the Years\",\n  xaxis = list(title = \"Album Release Year\"),\n  yaxis = list(title = \"Tempo (BPM)\")\n)\nfig\n```\n\n## Number of Albums released each year by each Artist\n\n<div class='tableauPlaceholder' id='viz1710392510766' style='position: relative'><noscript><a href='#'><img alt='albums ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='albums_17103889273940&#47;albums' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>\n<script type='text/javascript'>\n    var divElement = document.getElementById('viz1710392510766');\n    var vizElement = divElement.getElementsByTagName('object')[0];\n    if (divElement.offsetWidth > 800) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else if (divElement.offsetWidth > 500) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else {\n        vizElement.style.width='100%';\n        vizElement.style.height='727px';\n    }\n    var scriptElement = document.createElement('script');\n    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';\n    vizElement.parentNode.insertBefore(scriptElement, vizElement);\n</script>\n\n## Most frequently used words in track names\n\n```{r echo=FALSE}\n#| warning: false\n#| code-fold: true\n\nlibrary(dplyr)\nlibrary(wordcloud2)\nlibrary(tidyr)\nlibrary(tidytext)\n\n\ndf2<-df\n\n# Remove \"(Taylor's Version)\" from track names\ndf2$track_name <- gsub(\"\\\\(Taylor's Version\\\\)|Taylor’s Version|\\\\(From The Vault\\\\)\", \"\", df2$track_name)\n\n# Print cleaned track names\n#head(df2)\n\n# Filter data for Taylor Swift and Ed Sheeran\ntaylor_swift_data <- df2 %>% \n  filter(artist_name == \"Taylor Swift\")\n\ned_data <- df2 %>% \n  filter(artist_name == \"Ed Sheeran\")\n\n# Tokenize track names and count word frequencies for Taylor Swift\ntaylor_swift_word_freq <- taylor_swift_data %>%\n  unnest_tokens(word, track_name) %>%\n  count(word) %>%\n  arrange(desc(n))\n\n# Tokenize track names and count word frequencies for Ed Sheeran\ned_word_freq <- ed_data %>%\n  unnest_tokens(word, track_name) %>%\n  count(word) %>%\n  arrange(desc(n))\n```\n\n## Word cloud for Taylor Swift\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n# Create word clouds for Taylor Swift and Ed Sheeran\n# Words to be removed\nwords_to_remove <- c(\"the\", \"this\", \"to\", \"is\", \"are\")\n\n# Filter out the words to be removed from your word frequency data\ntaylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nts_size <- 1\nts_bg_color <- \"white\"\nts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')\n\n# Convert your filtered data to a data frame\nts_data <- as.data.frame(taylor_swift_word_freq_filtered)\nts_dataOut <- ts_data[,1:2]\nnames(ts_dataOut) <- c(\"name\", \"freq\")\n\n# Calculate weight factor\nweightFactor <- ts_size * 180 / max(ts_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction <- NULL\nwidgetsize <- NULL\n\n# Set up word cloud settings\nts_settings <- list(\n  word = ts_dataOut$name,\n  freq = ts_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = weightFactor,\n  backgroundColor = ts_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", ts_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n```\n\n## Word cloud for Ed Sheeran\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n# Words to be removed\nwords_to_remove <- c(\"on\", \"the\", \"in\")\n\n# Filter out the words to be removed from your word frequency data\ned_word_freq_filtered <- ed_word_freq[!ed_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nb_size <- 1\nb_bg_color <- \"white\"\nts_color <- ifelse(ed_word_freq_filtered[, 2] > 8, 'purple', 'green')\n\n# Convert your filtered data to a data frame\nb_data <- as.data.frame(ed_word_freq_filtered)\nb_dataOut <- b_data[,1:2]\nnames(b_dataOut) <- c(\"name\", \"freq\")\n\n# Calculate weight factor\nb_weightFactor <- b_size * 180 / max(b_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction <- NULL\nwidgetsize <- NULL\n\n# Set up word cloud settings\nb_settings <- list(\n  word = b_dataOut$name,\n  freq = b_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = b_weightFactor,\n  backgroundColor = b_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", b_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n```\n","srcMarkdownNoYaml":"\n\n```{r message=FALSE, warning=FALSE, echo=FALSE}\n#| code-fold: true\n#| code-summary: 'Importing Libraries'\n#| warning: false\n#| output: false\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(imputeTS)\nlibrary(gridExtra)\nlibrary(reticulate)\nlibrary(readxl)\n# use_python(\"/usr/local/bin/python3\", require = T)\n# knitr::knit_engines$set(python = reticulate::eng_python)\n# py_install(\"tensorflow\")\n```\n\n## Data\n\nThis data is downloaded using Spotify API.\n\n![](t1.png)\n\n![](e1.png)\n\n## Spotify Audio Features\n\nFor every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guide<https://developer.spotify.com/discover/> defines them as follows:\n\n`Danceability`: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\n\n`Valence`: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n`Energy`: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\n\n`Tempo`: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.\n\n`Loudness`: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\n\n`speechiness`: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\n\n`Instrumentalness`: Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\".\n\n`Liveness`: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\n\n`Acousticness`: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\n\n`Key`: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.\n\n`Mode`: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\n`Duration`: The duration of the track in milliseconds.\n\n`Time Signature`: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\n\n## Music properties of Ed Sheeran's and Taylor Swift's songs\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n\ndf<-read.csv(\"Artists_TS_B.csv\") \ndf$artist_name<-as.factor(df$artist_name)\n\n\n# Aggregate data to get average values for each year and artist\nagg_df <- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)\n\n# Define custom colors for Ed Sheeran and Taylor Swift\ncustom_colors <- c(\"Ed Sheeran\" = \"blue\", \"Taylor Swift\" = \"red\")\n\n# Plot danceability bubble chart\nfig1 <- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, \n                size = ~danceability,\n                color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6),\n                colors = custom_colors,\n                legendgroup = ~artist_name ,\n                showlegend = FALSE\n) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))\n\n\n\n# Plot speechiness bubble chart\nfig2 <- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, \n                size = ~speechiness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors, legendgroup = ~artist_name,\n                showlegend = FALSE) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Plot acousticness bubble chart\nfig3 <- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, \n                size = ~acousticness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = FALSE\n) |>\n  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) \n\n# Plot liveness bubble chart\nfig4 <- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, \n                size = ~liveness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = TRUE\n) |>\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Combine subplots\n#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)\n\n# fig <- make_subplots(rows=2,\n#                     cols=2,\n#                     #print_grid=True,\n#                     vertical_spacing=0.1,\n#                     horizontal_spacing=0.085,\n#                     x_title='Your master x-title',\n#                     y_title='Your master y-title')\n\nfig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)\n\n\nannotations <- list(\n  list(\n    x = 0.2,\n    y = 1.0,\n    text = \"Danceability\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 1,\n    text = \"Speechiness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.2,\n    y = 0.45,\n    text = \"Acousticness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 0.45,\n    text = \"Liveness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x=0.5,\n    y=-0.035,\n    text=\"Release Year\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"bottom\",\n    yanchor = \"top\",\n    showarrow = FALSE,\n    font=list(size=16)\n  )\n)\n\nfig <- fig |> layout(annotations = annotations)\nfig\n```\n\n# This is a bar chart for comparison\n\n<div class='tableauPlaceholder' id='viz1710389719964' style='position: relative'><noscript><a href='#'><img alt='music prop ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='musicprops&#47;musicprop' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;mu&#47;musicprops&#47;musicprop&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>\n<script type='text/javascript'>\n    var divElement = document.getElementById('viz1710389719964');\n    var vizElement = divElement.getElementsByTagName('object')[0];\n    if (divElement.offsetWidth > 800) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else if (divElement.offsetWidth > 500) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else {\n        vizElement.style.width='100%';\n        vizElement.style.height='727px';\n    }\n    var scriptElement = document.createElement('script');\n    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';\n    vizElement.parentNode.insertBefore(scriptElement, vizElement);\n</script>\n\n\n## Tempo Ed Sheeran's and Taylor Swift's songs over the Years\n\n```{r}\n#| warning: false\n#| code-fold: true\n\nyears_to_keep <- c(2014,2017,2019, 2021, 2022, 2023)\nfiltered_df <- subset(df, album_release_year %in% years_to_keep)\n\n# Aggregate tempo values by artist_name and album_release_year\nagg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)\n\n# Create the animated bar plot\nfig <- plot_ly(agg_df,\n               x = ~artist_name,\n               y = ~tempo, \n               color = ~artist_name, \n               type = 'bar',\n               frame = ~album_release_year, \n               text = ~artist_name, \n               hoverinfo = \"text\")\n\n# Add animation button and slider\nfig <- fig %>% animation_button(\n  x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n)\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n)\n\n# Add title, x-axis label, and y-axis label\nfig <- fig %>% layout(\n  title = \"Tempo of Ed Sheeran's and Taylor Swift’s songs over the Years\",\n  xaxis = list(title = \"Album Release Year\"),\n  yaxis = list(title = \"Tempo (BPM)\")\n)\nfig\n```\n\n## Number of Albums released each year by each Artist\n\n<div class='tableauPlaceholder' id='viz1710392510766' style='position: relative'><noscript><a href='#'><img alt='albums ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='albums_17103889273940&#47;albums' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;al&#47;albums_17103889273940&#47;albums&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>\n<script type='text/javascript'>\n    var divElement = document.getElementById('viz1710392510766');\n    var vizElement = divElement.getElementsByTagName('object')[0];\n    if (divElement.offsetWidth > 800) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else if (divElement.offsetWidth > 500) {\n        vizElement.style.width='100%';\n        vizElement.style.height=(divElement.offsetWidth*0.75)+'px';\n    } else {\n        vizElement.style.width='100%';\n        vizElement.style.height='727px';\n    }\n    var scriptElement = document.createElement('script');\n    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';\n    vizElement.parentNode.insertBefore(scriptElement, vizElement);\n</script>\n\n## Most frequently used words in track names\n\n```{r echo=FALSE}\n#| warning: false\n#| code-fold: true\n\nlibrary(dplyr)\nlibrary(wordcloud2)\nlibrary(tidyr)\nlibrary(tidytext)\n\n\ndf2<-df\n\n# Remove \"(Taylor's Version)\" from track names\ndf2$track_name <- gsub(\"\\\\(Taylor's Version\\\\)|Taylor’s Version|\\\\(From The Vault\\\\)\", \"\", df2$track_name)\n\n# Print cleaned track names\n#head(df2)\n\n# Filter data for Taylor Swift and Ed Sheeran\ntaylor_swift_data <- df2 %>% \n  filter(artist_name == \"Taylor Swift\")\n\ned_data <- df2 %>% \n  filter(artist_name == \"Ed Sheeran\")\n\n# Tokenize track names and count word frequencies for Taylor Swift\ntaylor_swift_word_freq <- taylor_swift_data %>%\n  unnest_tokens(word, track_name) %>%\n  count(word) %>%\n  arrange(desc(n))\n\n# Tokenize track names and count word frequencies for Ed Sheeran\ned_word_freq <- ed_data %>%\n  unnest_tokens(word, track_name) %>%\n  count(word) %>%\n  arrange(desc(n))\n```\n\n## Word cloud for Taylor Swift\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n# Create word clouds for Taylor Swift and Ed Sheeran\n# Words to be removed\nwords_to_remove <- c(\"the\", \"this\", \"to\", \"is\", \"are\")\n\n# Filter out the words to be removed from your word frequency data\ntaylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nts_size <- 1\nts_bg_color <- \"white\"\nts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')\n\n# Convert your filtered data to a data frame\nts_data <- as.data.frame(taylor_swift_word_freq_filtered)\nts_dataOut <- ts_data[,1:2]\nnames(ts_dataOut) <- c(\"name\", \"freq\")\n\n# Calculate weight factor\nweightFactor <- ts_size * 180 / max(ts_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction <- NULL\nwidgetsize <- NULL\n\n# Set up word cloud settings\nts_settings <- list(\n  word = ts_dataOut$name,\n  freq = ts_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = weightFactor,\n  backgroundColor = ts_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", ts_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n```\n\n## Word cloud for Ed Sheeran\n\n```{r}\n#| warning: false\n#| code-fold: true\n\n# Words to be removed\nwords_to_remove <- c(\"on\", \"the\", \"in\")\n\n# Filter out the words to be removed from your word frequency data\ned_word_freq_filtered <- ed_word_freq[!ed_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nb_size <- 1\nb_bg_color <- \"white\"\nts_color <- ifelse(ed_word_freq_filtered[, 2] > 8, 'purple', 'green')\n\n# Convert your filtered data to a data frame\nb_data <- as.data.frame(ed_word_freq_filtered)\nb_dataOut <- b_data[,1:2]\nnames(b_dataOut) <- c(\"name\", \"freq\")\n\n# Calculate weight factor\nb_weightFactor <- b_size * 180 / max(b_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction <- NULL\nwidgetsize <- NULL\n\n# Set up word cloud settings\nb_settings <- list(\n  word = b_dataOut$name,\n  freq = b_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = b_weightFactor,\n  backgroundColor = b_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", b_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"dv.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","editor":"visual","theme":"cosmo","title":"Data Visualizations"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}